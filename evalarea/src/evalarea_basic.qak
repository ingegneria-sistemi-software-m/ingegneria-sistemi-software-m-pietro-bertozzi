System evalarea

Dispatch resume_left_wall 	: resume_left_wall(X)
Dispatch resume_bottom_wall : resume_bottom_wall(X)
Event collisione     		: collisione(X)

Event  sonardata: sonar( DISTANCE ) 

// Eventi del sonar sul robot
//Event misurazione 			: misurazione(X)
//Event ostacolo 				: ostacolo(X)
//Event ostacolo_sparito 		: ostacolo_sparito(X)
 
Context ctx_evalarea 	ip [host="localhost" port=8075]

QActor wenv_caller context ctx_evalarea {
	import "main.java.*"
	
	[# 
		lateinit  var vr : VrobotLLMoves24 // a quanto pare inizializzarlo qua fuori non fa funzionare niente
		var doing_left_wall = false
		var doing_bottom_wall = false
		var steps_left_wall = 0
		var steps_bottom_wall = 0
	#]
	
	State s0 initial{ 
		println("$name | STARTS") color blue 
		[#
	 		vr = VrobotLLMoves24.create("localhost", myself)
	 		// vr.tracing = true
	 		vr.halt() // per sbloccare eventuali not allowed
	 	#] 
	}
	Goto stepLeftWall	 
	 
	State stepLeftWall {
		println("$name | stepLeftWall") color blue 
		delay 200
		[#
			doing_left_wall = true
			var step_ok = vr.step(350)
			if( step_ok) {
				steps_left_wall++
		#]
				println("		$name | steps_left_wall = $steps_left_wall") color magenta
				autodispatch resume_left_wall : resume_left_wall(ok)
		[#
				CommUtils.delay(500)
			}
		#]
	} 
	Transition t0 
		whenMsg resume_left_wall  -> stepLeftWall
		whenEvent sonardata -> handleSonar
		whenEvent collisione  -> turnLeft
	   
	State turnLeft {
		printCurrentMessage
		println("$name | turning") color blue 
		delay 2000
		[#
			vr.halt()
			doing_left_wall = false
	        vr.turnLeft();
		#]
	}
	Goto stepBottomWall
	    
	State stepBottomWall {
		println("$name | stepBottomWall") color blue 
		delay 200
		[#
			doing_bottom_wall = true
			var step_ok = vr.step(350)
			if(step_ok) {
				steps_bottom_wall++
		#]
				println("		$name | steps_bottom_wall = $steps_bottom_wall") color magenta
				autodispatch resume_bottom_wall : resume_bottom_wall(ok)
		[#
				CommUtils.delay(500)
			}
		#]
	}
	Transition t0 
		whenMsg resume_bottom_wall  -> stepBottomWall
		whenEvent sonardata -> handleSonar
		whenEvent collisione  -> calcArea
	
	State handleSonar {
		printCurrentMessage
		[#
			var step_ok = vr.step(350) // mi scanso da sotto il sonar
		#]
		
		if [# doing_left_wall && step_ok #] {
			[# steps_left_wall++ #]
			println("		$name | steps_left_wall = $steps_left_wall") color magenta
			// autodispatch resume_left_wall : resume_left_wall(ok) // ne ho già uno in coda
		} 
		
		if [# doing_bottom_wall && step_ok #] {
			[# steps_bottom_wall++ #]
			println("		$name | steps_bottom_wall = $steps_bottom_wall") color magenta
			// autodispatch resume_bottom_wall : resume_bottom_wall(ok) // ne ho già uno in coda
		}
		
		delay 200 //invece che 200
	}
	Transition t0 
		whenMsg resume_left_wall  -> stepLeftWall
		whenMsg resume_bottom_wall  -> stepBottomWall
	
	State calcArea {
		printCurrentMessage
		println("$name | calcArea") color blue 
		[#
			vr.halt()
	        vr.turnLeft();
	        doing_bottom_wall = false
	        
			val area 	= steps_left_wall * steps_bottom_wall
		#]
		
		println("$name | Area = $area passi quadrati") color green
		println("		$name | steps_left_wall = $steps_left_wall passi") color green
		println("		$name | steps_bottom_wall = $steps_bottom_wall passi") color green
		[# System.exit(0) #]
	}
}
	